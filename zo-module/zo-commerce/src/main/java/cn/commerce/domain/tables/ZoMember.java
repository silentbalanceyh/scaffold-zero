/*
 * This file is generated by jOOQ.
 */
package cn.commerce.domain.tables;


import cn.commerce.domain.Db;
import cn.commerce.domain.Keys;
import cn.commerce.domain.tables.records.ZoMemberRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ZoMember extends TableImpl<ZoMemberRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>DB_SCAFFOLD.ZO_MEMBER</code>
     */
    public static final ZoMember ZO_MEMBER = new ZoMember();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ZoMemberRecord> getRecordType() {
        return ZoMemberRecord.class;
    }

    /**
     * The column <code>DB_SCAFFOLD.ZO_MEMBER.PK_ID</code>. uniqueId,PK_ID
     */
    public final TableField<ZoMemberRecord, String> PK_ID = createField(DSL.name("PK_ID"), SQLDataType.VARCHAR(36).nullable(false), this, "uniqueId,PK_ID");

    /**
     * The column <code>DB_SCAFFOLD.ZO_MEMBER.R_IDENTITY_ID</code>.
     * 「identityId」- 关联档案
     */
    public final TableField<ZoMemberRecord, String> R_IDENTITY_ID = createField(DSL.name("R_IDENTITY_ID"), SQLDataType.VARCHAR(36), this, "「identityId」- 关联档案");

    /**
     * The column <code>DB_SCAFFOLD.ZO_MEMBER.R_COMPANY_ID</code>. 「companyId」-
     * 所属公司
     */
    public final TableField<ZoMemberRecord, String> R_COMPANY_ID = createField(DSL.name("R_COMPANY_ID"), SQLDataType.VARCHAR(36), this, "「companyId」- 所属公司");

    /**
     * The column <code>DB_SCAFFOLD.ZO_MEMBER.R_CARD_ID</code>. 「cardId」- 绑定卡
     */
    public final TableField<ZoMemberRecord, String> R_CARD_ID = createField(DSL.name("R_CARD_ID"), SQLDataType.VARCHAR(36), this, "「cardId」- 绑定卡");

    /**
     * The column <code>DB_SCAFFOLD.ZO_MEMBER.L_POINT</code>. 积分,point,L_POINT
     */
    public final TableField<ZoMemberRecord, Long> L_POINT = createField(DSL.name("L_POINT"), SQLDataType.BIGINT, this, "积分,point,L_POINT");

    /**
     * The column <code>DB_SCAFFOLD.ZO_MEMBER.S_PROPOSER</code>.
     * 推荐人,proposer,S_PROPOSER
     */
    public final TableField<ZoMemberRecord, String> S_PROPOSER = createField(DSL.name("S_PROPOSER"), SQLDataType.VARCHAR(32), this, "推荐人,proposer,S_PROPOSER");

    /**
     * The column <code>DB_SCAFFOLD.ZO_MEMBER.S_CODE</code>. 会员编号,code,S_CODE
     */
    public final TableField<ZoMemberRecord, String> S_CODE = createField(DSL.name("S_CODE"), SQLDataType.VARCHAR(36), this, "会员编号,code,S_CODE");

    /**
     * The column <code>DB_SCAFFOLD.ZO_MEMBER.RLT_MBER_LEVEL</code>.
     * 会员等级,level,RLT_MBER_LEVEL
     */
    public final TableField<ZoMemberRecord, String> RLT_MBER_LEVEL = createField(DSL.name("RLT_MBER_LEVEL"), SQLDataType.VARCHAR(36), this, "会员等级,level,RLT_MBER_LEVEL");

    /**
     * The column <code>DB_SCAFFOLD.ZO_MEMBER.RLT_MBER_STATUS</code>.
     * 会员状态,status,RLT_MBER_STATUS
     */
    public final TableField<ZoMemberRecord, String> RLT_MBER_STATUS = createField(DSL.name("RLT_MBER_STATUS"), SQLDataType.VARCHAR(36), this, "会员状态,status,RLT_MBER_STATUS");

    /**
     * The column <code>DB_SCAFFOLD.ZO_MEMBER.S_LICENSE_NUM</code>.
     * 驾驶证,licenseNumber,S_LICENSE_NUM
     */
    public final TableField<ZoMemberRecord, String> S_LICENSE_NUM = createField(DSL.name("S_LICENSE_NUM"), SQLDataType.VARCHAR(16), this, "驾驶证,licenseNumber,S_LICENSE_NUM");

    /**
     * The column <code>DB_SCAFFOLD.ZO_MEMBER.S_MOBILE</code>.
     * 手机号,mobile,S_MOBILE
     */
    public final TableField<ZoMemberRecord, String> S_MOBILE = createField(DSL.name("S_MOBILE"), SQLDataType.VARCHAR(20), this, "手机号,mobile,S_MOBILE");

    /**
     * The column <code>DB_SCAFFOLD.ZO_MEMBER.S_NICKNAME</code>.
     * 昵称,nickname,S_NICKNAME
     */
    public final TableField<ZoMemberRecord, String> S_NICKNAME = createField(DSL.name("S_NICKNAME"), SQLDataType.VARCHAR(64), this, "昵称,nickname,S_NICKNAME");

    /**
     * The column <code>DB_SCAFFOLD.ZO_MEMBER.S_PHOTO</code>. 头像,photo,S_PHOTO
     */
    public final TableField<ZoMemberRecord, String> S_PHOTO = createField(DSL.name("S_PHOTO"), SQLDataType.VARCHAR(255), this, "头像,photo,S_PHOTO");

    /**
     * The column <code>DB_SCAFFOLD.ZO_MEMBER.S_REALNAME</code>.
     * 姓名,realname,S_REALNAME
     */
    public final TableField<ZoMemberRecord, String> S_REALNAME = createField(DSL.name("S_REALNAME"), SQLDataType.VARCHAR(64), this, "姓名,realname,S_REALNAME");

    /**
     * The column <code>DB_SCAFFOLD.ZO_MEMBER.D_BIRTHDAY</code>.
     * 生日,birthday,D_BIRTHDAY
     */
    public final TableField<ZoMemberRecord, LocalDateTime> D_BIRTHDAY = createField(DSL.name("D_BIRTHDAY"), SQLDataType.LOCALDATETIME(0), this, "生日,birthday,D_BIRTHDAY");

    /**
     * The column <code>DB_SCAFFOLD.ZO_MEMBER.IS_MALE</code>.
     * 男？true为男，false为女,male,IS_MALE
     */
    public final TableField<ZoMemberRecord, Boolean> IS_MALE = createField(DSL.name("IS_MALE"), SQLDataType.BIT, this, "男？true为男，false为女,male,IS_MALE");

    /**
     * The column <code>DB_SCAFFOLD.ZO_MEMBER.J_CONFIG</code>. config,J_CONFIG
     */
    public final TableField<ZoMemberRecord, String> J_CONFIG = createField(DSL.name("J_CONFIG"), SQLDataType.CLOB, this, "config,J_CONFIG");

    /**
     * The column <code>DB_SCAFFOLD.ZO_MEMBER.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public final TableField<ZoMemberRecord, Boolean> IS_ACTIVE = createField(DSL.name("IS_ACTIVE"), SQLDataType.BIT, this, "active,IS_ACTIVE");

    /**
     * The column <code>DB_SCAFFOLD.ZO_MEMBER.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public final TableField<ZoMemberRecord, String> Z_SIGMA = createField(DSL.name("Z_SIGMA"), SQLDataType.VARCHAR(32), this, "sigma,Z_SIGMA");

    /**
     * The column <code>DB_SCAFFOLD.ZO_MEMBER.Z_LANGUAGE</code>.
     * language,Z_LANGUAGE
     */
    public final TableField<ZoMemberRecord, String> Z_LANGUAGE = createField(DSL.name("Z_LANGUAGE"), SQLDataType.VARCHAR(8), this, "language,Z_LANGUAGE");

    /**
     * The column <code>DB_SCAFFOLD.ZO_MEMBER.Z_CREATE_BY</code>.
     * createBy,Z_CREATE_BY
     */
    public final TableField<ZoMemberRecord, String> Z_CREATE_BY = createField(DSL.name("Z_CREATE_BY"), SQLDataType.VARCHAR(36), this, "createBy,Z_CREATE_BY");

    /**
     * The column <code>DB_SCAFFOLD.ZO_MEMBER.Z_CREATE_TIME</code>.
     * createTime,Z_CREATE_TIME
     */
    public final TableField<ZoMemberRecord, LocalDateTime> Z_CREATE_TIME = createField(DSL.name("Z_CREATE_TIME"), SQLDataType.LOCALDATETIME(0), this, "createTime,Z_CREATE_TIME");

    /**
     * The column <code>DB_SCAFFOLD.ZO_MEMBER.Z_UPDATE_BY</code>.
     * updateBy,Z_UPDATE_BY
     */
    public final TableField<ZoMemberRecord, String> Z_UPDATE_BY = createField(DSL.name("Z_UPDATE_BY"), SQLDataType.VARCHAR(36), this, "updateBy,Z_UPDATE_BY");

    /**
     * The column <code>DB_SCAFFOLD.ZO_MEMBER.Z_UPDATE_TIME</code>.
     * updateTime,Z_UPDATE_TIME
     */
    public final TableField<ZoMemberRecord, LocalDateTime> Z_UPDATE_TIME = createField(DSL.name("Z_UPDATE_TIME"), SQLDataType.LOCALDATETIME(0), this, "updateTime,Z_UPDATE_TIME");

    private ZoMember(Name alias, Table<ZoMemberRecord> aliased) {
        this(alias, aliased, null);
    }

    private ZoMember(Name alias, Table<ZoMemberRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_SCAFFOLD.ZO_MEMBER</code> table reference
     */
    public ZoMember(String alias) {
        this(DSL.name(alias), ZO_MEMBER);
    }

    /**
     * Create an aliased <code>DB_SCAFFOLD.ZO_MEMBER</code> table reference
     */
    public ZoMember(Name alias) {
        this(alias, ZO_MEMBER);
    }

    /**
     * Create a <code>DB_SCAFFOLD.ZO_MEMBER</code> table reference
     */
    public ZoMember() {
        this(DSL.name("ZO_MEMBER"), null);
    }

    public <O extends Record> ZoMember(Table<O> child, ForeignKey<O, ZoMemberRecord> key) {
        super(child, key, ZO_MEMBER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_SCAFFOLD;
    }

    @Override
    public UniqueKey<ZoMemberRecord> getPrimaryKey() {
        return Keys.KEY_ZO_MEMBER_PRIMARY;
    }

    @Override
    public List<UniqueKey<ZoMemberRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ZO_MEMBER_UK_ZO_MEMBER_S_CODE_Z_SIGMA, Keys.KEY_ZO_MEMBER_UK_ZO_MEMBER_S_MOBILE_Z_SIGMA);
    }

    @Override
    public ZoMember as(String alias) {
        return new ZoMember(DSL.name(alias), this);
    }

    @Override
    public ZoMember as(Name alias) {
        return new ZoMember(alias, this);
    }

    @Override
    public ZoMember as(Table<?> alias) {
        return new ZoMember(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ZoMember rename(String name) {
        return new ZoMember(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ZoMember rename(Name name) {
        return new ZoMember(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ZoMember rename(Table<?> name) {
        return new ZoMember(name.getQualifiedName(), null);
    }
}
