/*
 * This file is generated by jOOQ.
 */
package cn.commerce.domain.tables.records;


import cn.commerce.domain.tables.ZoMember;
import cn.commerce.domain.tables.interfaces.IZoMember;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ZoMemberRecord extends UpdatableRecordImpl<ZoMemberRecord> implements VertxPojo, IZoMember {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_MEMBER.PK_ID</code>. uniqueId,PK_ID
     */
    @Override
    public ZoMemberRecord setPkId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_MEMBER.PK_ID</code>. uniqueId,PK_ID
     */
    @Override
    public String getPkId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_MEMBER.R_IDENTITY_ID</code>.
     * 「identityId」- 关联档案
     */
    @Override
    public ZoMemberRecord setRIdentityId(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_MEMBER.R_IDENTITY_ID</code>.
     * 「identityId」- 关联档案
     */
    @Override
    public String getRIdentityId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_MEMBER.R_COMPANY_ID</code>. 「companyId」-
     * 所属公司
     */
    @Override
    public ZoMemberRecord setRCompanyId(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_MEMBER.R_COMPANY_ID</code>. 「companyId」-
     * 所属公司
     */
    @Override
    public String getRCompanyId() {
        return (String) get(2);
    }

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_MEMBER.R_CARD_ID</code>. 「cardId」- 绑定卡
     */
    @Override
    public ZoMemberRecord setRCardId(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_MEMBER.R_CARD_ID</code>. 「cardId」- 绑定卡
     */
    @Override
    public String getRCardId() {
        return (String) get(3);
    }

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_MEMBER.L_POINT</code>. 积分,point,L_POINT
     */
    @Override
    public ZoMemberRecord setLPoint(Long value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_MEMBER.L_POINT</code>. 积分,point,L_POINT
     */
    @Override
    public Long getLPoint() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_MEMBER.S_PROPOSER</code>.
     * 推荐人,proposer,S_PROPOSER
     */
    @Override
    public ZoMemberRecord setSProposer(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_MEMBER.S_PROPOSER</code>.
     * 推荐人,proposer,S_PROPOSER
     */
    @Override
    public String getSProposer() {
        return (String) get(5);
    }

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_MEMBER.S_CODE</code>. 会员编号,code,S_CODE
     */
    @Override
    public ZoMemberRecord setSCode(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_MEMBER.S_CODE</code>. 会员编号,code,S_CODE
     */
    @Override
    public String getSCode() {
        return (String) get(6);
    }

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_MEMBER.RLT_MBER_LEVEL</code>.
     * 会员等级,level,RLT_MBER_LEVEL
     */
    @Override
    public ZoMemberRecord setRltMberLevel(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_MEMBER.RLT_MBER_LEVEL</code>.
     * 会员等级,level,RLT_MBER_LEVEL
     */
    @Override
    public String getRltMberLevel() {
        return (String) get(7);
    }

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_MEMBER.RLT_MBER_STATUS</code>.
     * 会员状态,status,RLT_MBER_STATUS
     */
    @Override
    public ZoMemberRecord setRltMberStatus(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_MEMBER.RLT_MBER_STATUS</code>.
     * 会员状态,status,RLT_MBER_STATUS
     */
    @Override
    public String getRltMberStatus() {
        return (String) get(8);
    }

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_MEMBER.S_LICENSE_NUM</code>.
     * 驾驶证,licenseNumber,S_LICENSE_NUM
     */
    @Override
    public ZoMemberRecord setSLicenseNum(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_MEMBER.S_LICENSE_NUM</code>.
     * 驾驶证,licenseNumber,S_LICENSE_NUM
     */
    @Override
    public String getSLicenseNum() {
        return (String) get(9);
    }

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_MEMBER.S_MOBILE</code>.
     * 手机号,mobile,S_MOBILE
     */
    @Override
    public ZoMemberRecord setSMobile(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_MEMBER.S_MOBILE</code>.
     * 手机号,mobile,S_MOBILE
     */
    @Override
    public String getSMobile() {
        return (String) get(10);
    }

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_MEMBER.S_NICKNAME</code>.
     * 昵称,nickname,S_NICKNAME
     */
    @Override
    public ZoMemberRecord setSNickname(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_MEMBER.S_NICKNAME</code>.
     * 昵称,nickname,S_NICKNAME
     */
    @Override
    public String getSNickname() {
        return (String) get(11);
    }

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_MEMBER.S_PHOTO</code>. 头像,photo,S_PHOTO
     */
    @Override
    public ZoMemberRecord setSPhoto(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_MEMBER.S_PHOTO</code>. 头像,photo,S_PHOTO
     */
    @Override
    public String getSPhoto() {
        return (String) get(12);
    }

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_MEMBER.S_REALNAME</code>.
     * 姓名,realname,S_REALNAME
     */
    @Override
    public ZoMemberRecord setSRealname(String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_MEMBER.S_REALNAME</code>.
     * 姓名,realname,S_REALNAME
     */
    @Override
    public String getSRealname() {
        return (String) get(13);
    }

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_MEMBER.D_BIRTHDAY</code>.
     * 生日,birthday,D_BIRTHDAY
     */
    @Override
    public ZoMemberRecord setDBirthday(LocalDateTime value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_MEMBER.D_BIRTHDAY</code>.
     * 生日,birthday,D_BIRTHDAY
     */
    @Override
    public LocalDateTime getDBirthday() {
        return (LocalDateTime) get(14);
    }

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_MEMBER.IS_MALE</code>.
     * 男？true为男，false为女,male,IS_MALE
     */
    @Override
    public ZoMemberRecord setIsMale(Boolean value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_MEMBER.IS_MALE</code>.
     * 男？true为男，false为女,male,IS_MALE
     */
    @Override
    public Boolean getIsMale() {
        return (Boolean) get(15);
    }

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_MEMBER.J_CONFIG</code>. config,J_CONFIG
     */
    @Override
    public ZoMemberRecord setJConfig(String value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_MEMBER.J_CONFIG</code>. config,J_CONFIG
     */
    @Override
    public String getJConfig() {
        return (String) get(16);
    }

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_MEMBER.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    @Override
    public ZoMemberRecord setIsActive(Boolean value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_MEMBER.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    @Override
    public Boolean getIsActive() {
        return (Boolean) get(17);
    }

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_MEMBER.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    @Override
    public ZoMemberRecord setZSigma(String value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_MEMBER.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    @Override
    public String getZSigma() {
        return (String) get(18);
    }

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_MEMBER.Z_LANGUAGE</code>.
     * language,Z_LANGUAGE
     */
    @Override
    public ZoMemberRecord setZLanguage(String value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_MEMBER.Z_LANGUAGE</code>.
     * language,Z_LANGUAGE
     */
    @Override
    public String getZLanguage() {
        return (String) get(19);
    }

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_MEMBER.Z_CREATE_BY</code>.
     * createBy,Z_CREATE_BY
     */
    @Override
    public ZoMemberRecord setZCreateBy(String value) {
        set(20, value);
        return this;
    }

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_MEMBER.Z_CREATE_BY</code>.
     * createBy,Z_CREATE_BY
     */
    @Override
    public String getZCreateBy() {
        return (String) get(20);
    }

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_MEMBER.Z_CREATE_TIME</code>.
     * createTime,Z_CREATE_TIME
     */
    @Override
    public ZoMemberRecord setZCreateTime(LocalDateTime value) {
        set(21, value);
        return this;
    }

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_MEMBER.Z_CREATE_TIME</code>.
     * createTime,Z_CREATE_TIME
     */
    @Override
    public LocalDateTime getZCreateTime() {
        return (LocalDateTime) get(21);
    }

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_MEMBER.Z_UPDATE_BY</code>.
     * updateBy,Z_UPDATE_BY
     */
    @Override
    public ZoMemberRecord setZUpdateBy(String value) {
        set(22, value);
        return this;
    }

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_MEMBER.Z_UPDATE_BY</code>.
     * updateBy,Z_UPDATE_BY
     */
    @Override
    public String getZUpdateBy() {
        return (String) get(22);
    }

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_MEMBER.Z_UPDATE_TIME</code>.
     * updateTime,Z_UPDATE_TIME
     */
    @Override
    public ZoMemberRecord setZUpdateTime(LocalDateTime value) {
        set(23, value);
        return this;
    }

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_MEMBER.Z_UPDATE_TIME</code>.
     * updateTime,Z_UPDATE_TIME
     */
    @Override
    public LocalDateTime getZUpdateTime() {
        return (LocalDateTime) get(23);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IZoMember from) {
        setPkId(from.getPkId());
        setRIdentityId(from.getRIdentityId());
        setRCompanyId(from.getRCompanyId());
        setRCardId(from.getRCardId());
        setLPoint(from.getLPoint());
        setSProposer(from.getSProposer());
        setSCode(from.getSCode());
        setRltMberLevel(from.getRltMberLevel());
        setRltMberStatus(from.getRltMberStatus());
        setSLicenseNum(from.getSLicenseNum());
        setSMobile(from.getSMobile());
        setSNickname(from.getSNickname());
        setSPhoto(from.getSPhoto());
        setSRealname(from.getSRealname());
        setDBirthday(from.getDBirthday());
        setIsMale(from.getIsMale());
        setJConfig(from.getJConfig());
        setIsActive(from.getIsActive());
        setZSigma(from.getZSigma());
        setZLanguage(from.getZLanguage());
        setZCreateBy(from.getZCreateBy());
        setZCreateTime(from.getZCreateTime());
        setZUpdateBy(from.getZUpdateBy());
        setZUpdateTime(from.getZUpdateTime());
    }

    @Override
    public <E extends IZoMember> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ZoMemberRecord
     */
    public ZoMemberRecord() {
        super(ZoMember.ZO_MEMBER);
    }

    /**
     * Create a detached, initialised ZoMemberRecord
     */
    public ZoMemberRecord(String pkId, String rIdentityId, String rCompanyId, String rCardId, Long lPoint, String sProposer, String sCode, String rltMberLevel, String rltMberStatus, String sLicenseNum, String sMobile, String sNickname, String sPhoto, String sRealname, LocalDateTime dBirthday, Boolean isMale, String jConfig, Boolean isActive, String zSigma, String zLanguage, String zCreateBy, LocalDateTime zCreateTime, String zUpdateBy, LocalDateTime zUpdateTime) {
        super(ZoMember.ZO_MEMBER);

        setPkId(pkId);
        setRIdentityId(rIdentityId);
        setRCompanyId(rCompanyId);
        setRCardId(rCardId);
        setLPoint(lPoint);
        setSProposer(sProposer);
        setSCode(sCode);
        setRltMberLevel(rltMberLevel);
        setRltMberStatus(rltMberStatus);
        setSLicenseNum(sLicenseNum);
        setSMobile(sMobile);
        setSNickname(sNickname);
        setSPhoto(sPhoto);
        setSRealname(sRealname);
        setDBirthday(dBirthday);
        setIsMale(isMale);
        setJConfig(jConfig);
        setIsActive(isActive);
        setZSigma(zSigma);
        setZLanguage(zLanguage);
        setZCreateBy(zCreateBy);
        setZCreateTime(zCreateTime);
        setZUpdateBy(zUpdateBy);
        setZUpdateTime(zUpdateTime);
    }

    /**
     * Create a detached, initialised ZoMemberRecord
     */
    public ZoMemberRecord(cn.commerce.domain.tables.pojos.ZoMember value) {
        super(ZoMember.ZO_MEMBER);

        if (value != null) {
            setPkId(value.getPkId());
            setRIdentityId(value.getRIdentityId());
            setRCompanyId(value.getRCompanyId());
            setRCardId(value.getRCardId());
            setLPoint(value.getLPoint());
            setSProposer(value.getSProposer());
            setSCode(value.getSCode());
            setRltMberLevel(value.getRltMberLevel());
            setRltMberStatus(value.getRltMberStatus());
            setSLicenseNum(value.getSLicenseNum());
            setSMobile(value.getSMobile());
            setSNickname(value.getSNickname());
            setSPhoto(value.getSPhoto());
            setSRealname(value.getSRealname());
            setDBirthday(value.getDBirthday());
            setIsMale(value.getIsMale());
            setJConfig(value.getJConfig());
            setIsActive(value.getIsActive());
            setZSigma(value.getZSigma());
            setZLanguage(value.getZLanguage());
            setZCreateBy(value.getZCreateBy());
            setZCreateTime(value.getZCreateTime());
            setZUpdateBy(value.getZUpdateBy());
            setZUpdateTime(value.getZUpdateTime());
        }
    }

        public ZoMemberRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
