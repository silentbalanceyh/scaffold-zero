/*
 * This file is generated by jOOQ.
 */
package cn.commerce.domain.tables.interfaces;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.io.Serializable;
import java.math.BigDecimal;
import java.time.LocalDateTime;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IZoCard extends VertxPojo, Serializable {

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_CARD.PK_ID</code>. uniqueId,PK_ID
     */
    public IZoCard setPkId(String value);

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_CARD.PK_ID</code>. uniqueId,PK_ID
     */
    public String getPkId();

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_CARD.D_AMOUNT</code>. 卡余额,amount,D_AMOUNT
     */
    public IZoCard setDAmount(BigDecimal value);

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_CARD.D_AMOUNT</code>. 卡余额,amount,D_AMOUNT
     */
    public BigDecimal getDAmount();

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_CARD.D_EXPIRED_TIME</code>.
     * 过期时间,expiredTime,D_EXPIRED_TIME
     */
    public IZoCard setDExpiredTime(LocalDateTime value);

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_CARD.D_EXPIRED_TIME</code>.
     * 过期时间,expiredTime,D_EXPIRED_TIME
     */
    public LocalDateTime getDExpiredTime();

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_CARD.L_POINT</code>. 积分,point,L_POINT
     */
    public IZoCard setLPoint(Long value);

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_CARD.L_POINT</code>. 积分,point,L_POINT
     */
    public Long getLPoint();

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_CARD.S_CODE</code>. 编号,code,S_CODE
     */
    public IZoCard setSCode(String value);

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_CARD.S_CODE</code>. 编号,code,S_CODE
     */
    public String getSCode();

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_CARD.S_BATCH</code>. 批次,batch,S_BATCH
     */
    public IZoCard setSBatch(String value);

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_CARD.S_BATCH</code>. 批次,batch,S_BATCH
     */
    public String getSBatch();

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_CARD.S_NUMBER</code>. 卡号,number,S_NUMBER
     */
    public IZoCard setSNumber(String value);

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_CARD.S_NUMBER</code>. 卡号,number,S_NUMBER
     */
    public String getSNumber();

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_CARD.RLT_CARD_TYPE</code>.
     * 类型,cardType,RLT_CARD_TYPE
     */
    public IZoCard setRltCardType(String value);

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_CARD.RLT_CARD_TYPE</code>.
     * 类型,cardType,RLT_CARD_TYPE
     */
    public String getRltCardType();

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_CARD.IS_MAJOR</code>. 主卡,major,IS_MAJOR
     */
    public IZoCard setIsMajor(Boolean value);

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_CARD.IS_MAJOR</code>. 主卡,major,IS_MAJOR
     */
    public Boolean getIsMajor();

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_CARD.J_CONFIG</code>. config,J_CONFIG
     */
    public IZoCard setJConfig(String value);

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_CARD.J_CONFIG</code>. config,J_CONFIG
     */
    public String getJConfig();

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_CARD.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public IZoCard setIsActive(Boolean value);

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_CARD.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public Boolean getIsActive();

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_CARD.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public IZoCard setZSigma(String value);

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_CARD.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public String getZSigma();

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_CARD.Z_LANGUAGE</code>.
     * language,Z_LANGUAGE
     */
    public IZoCard setZLanguage(String value);

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_CARD.Z_LANGUAGE</code>.
     * language,Z_LANGUAGE
     */
    public String getZLanguage();

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_CARD.Z_CREATE_BY</code>.
     * createBy,Z_CREATE_BY
     */
    public IZoCard setZCreateBy(String value);

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_CARD.Z_CREATE_BY</code>.
     * createBy,Z_CREATE_BY
     */
    public String getZCreateBy();

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_CARD.Z_CREATE_TIME</code>.
     * createTime,Z_CREATE_TIME
     */
    public IZoCard setZCreateTime(LocalDateTime value);

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_CARD.Z_CREATE_TIME</code>.
     * createTime,Z_CREATE_TIME
     */
    public LocalDateTime getZCreateTime();

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_CARD.Z_UPDATE_BY</code>.
     * updateBy,Z_UPDATE_BY
     */
    public IZoCard setZUpdateBy(String value);

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_CARD.Z_UPDATE_BY</code>.
     * updateBy,Z_UPDATE_BY
     */
    public String getZUpdateBy();

    /**
     * Setter for <code>DB_SCAFFOLD.ZO_CARD.Z_UPDATE_TIME</code>.
     * updateTime,Z_UPDATE_TIME
     */
    public IZoCard setZUpdateTime(LocalDateTime value);

    /**
     * Getter for <code>DB_SCAFFOLD.ZO_CARD.Z_UPDATE_TIME</code>.
     * updateTime,Z_UPDATE_TIME
     */
    public LocalDateTime getZUpdateTime();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common
     * interface IZoCard
     */
    public void from(IZoCard from);

    /**
     * Copy data into another generated Record/POJO implementing the common
     * interface IZoCard
     */
    public <E extends IZoCard> E into(E into);

        @Override
        public default IZoCard fromJson(io.vertx.core.json.JsonObject json) {
                setOrThrow(this::setPkId,json::getString,"PK_ID","java.lang.String");
                setOrThrow(this::setDAmount,key -> {String s = json.getString(key); return s==null?null:new java.math.BigDecimal(s);},"D_AMOUNT","java.math.BigDecimal");
                setOrThrow(this::setDExpiredTime,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"D_EXPIRED_TIME","java.time.LocalDateTime");
                setOrThrow(this::setLPoint,json::getLong,"L_POINT","java.lang.Long");
                setOrThrow(this::setSCode,json::getString,"S_CODE","java.lang.String");
                setOrThrow(this::setSBatch,json::getString,"S_BATCH","java.lang.String");
                setOrThrow(this::setSNumber,json::getString,"S_NUMBER","java.lang.String");
                setOrThrow(this::setRltCardType,json::getString,"RLT_CARD_TYPE","java.lang.String");
                setOrThrow(this::setIsMajor,json::getBoolean,"IS_MAJOR","java.lang.Boolean");
                setOrThrow(this::setJConfig,json::getString,"J_CONFIG","java.lang.String");
                setOrThrow(this::setIsActive,json::getBoolean,"IS_ACTIVE","java.lang.Boolean");
                setOrThrow(this::setZSigma,json::getString,"Z_SIGMA","java.lang.String");
                setOrThrow(this::setZLanguage,json::getString,"Z_LANGUAGE","java.lang.String");
                setOrThrow(this::setZCreateBy,json::getString,"Z_CREATE_BY","java.lang.String");
                setOrThrow(this::setZCreateTime,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"Z_CREATE_TIME","java.time.LocalDateTime");
                setOrThrow(this::setZUpdateBy,json::getString,"Z_UPDATE_BY","java.lang.String");
                setOrThrow(this::setZUpdateTime,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"Z_UPDATE_TIME","java.time.LocalDateTime");
                return this;
        }


        @Override
        public default io.vertx.core.json.JsonObject toJson() {
                io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
                json.put("PK_ID",getPkId());
                json.put("D_AMOUNT",getDAmount()==null?null:getDAmount().toString());
                json.put("D_EXPIRED_TIME",getDExpiredTime()==null?null:getDExpiredTime().toString());
                json.put("L_POINT",getLPoint());
                json.put("S_CODE",getSCode());
                json.put("S_BATCH",getSBatch());
                json.put("S_NUMBER",getSNumber());
                json.put("RLT_CARD_TYPE",getRltCardType());
                json.put("IS_MAJOR",getIsMajor());
                json.put("J_CONFIG",getJConfig());
                json.put("IS_ACTIVE",getIsActive());
                json.put("Z_SIGMA",getZSigma());
                json.put("Z_LANGUAGE",getZLanguage());
                json.put("Z_CREATE_BY",getZCreateBy());
                json.put("Z_CREATE_TIME",getZCreateTime()==null?null:getZCreateTime().toString());
                json.put("Z_UPDATE_BY",getZUpdateBy());
                json.put("Z_UPDATE_TIME",getZUpdateTime()==null?null:getZUpdateTime().toString());
                return json;
        }

}
