/*
 * This file is generated by jOOQ.
 */
package cn.commerce.domain.tables;


import cn.commerce.domain.Db;
import cn.commerce.domain.Keys;
import cn.commerce.domain.tables.records.ZoCardRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function17;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ZoCard extends TableImpl<ZoCardRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>DB_SCAFFOLD.ZO_CARD</code>
     */
    public static final ZoCard ZO_CARD = new ZoCard();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ZoCardRecord> getRecordType() {
        return ZoCardRecord.class;
    }

    /**
     * The column <code>DB_SCAFFOLD.ZO_CARD.PK_ID</code>. uniqueId,PK_ID
     */
    public final TableField<ZoCardRecord, String> PK_ID = createField(DSL.name("PK_ID"), SQLDataType.VARCHAR(36).nullable(false), this, "uniqueId,PK_ID");

    /**
     * The column <code>DB_SCAFFOLD.ZO_CARD.D_AMOUNT</code>. 卡余额,amount,D_AMOUNT
     */
    public final TableField<ZoCardRecord, BigDecimal> D_AMOUNT = createField(DSL.name("D_AMOUNT"), SQLDataType.DECIMAL(10, 2).nullable(false), this, "卡余额,amount,D_AMOUNT");

    /**
     * The column <code>DB_SCAFFOLD.ZO_CARD.D_EXPIRED_TIME</code>.
     * 过期时间,expiredTime,D_EXPIRED_TIME
     */
    public final TableField<ZoCardRecord, LocalDateTime> D_EXPIRED_TIME = createField(DSL.name("D_EXPIRED_TIME"), SQLDataType.LOCALDATETIME(0), this, "过期时间,expiredTime,D_EXPIRED_TIME");

    /**
     * The column <code>DB_SCAFFOLD.ZO_CARD.L_POINT</code>. 积分,point,L_POINT
     */
    public final TableField<ZoCardRecord, Long> L_POINT = createField(DSL.name("L_POINT"), SQLDataType.BIGINT, this, "积分,point,L_POINT");

    /**
     * The column <code>DB_SCAFFOLD.ZO_CARD.S_CODE</code>. 编号,code,S_CODE
     */
    public final TableField<ZoCardRecord, String> S_CODE = createField(DSL.name("S_CODE"), SQLDataType.VARCHAR(36), this, "编号,code,S_CODE");

    /**
     * The column <code>DB_SCAFFOLD.ZO_CARD.S_BATCH</code>. 批次,batch,S_BATCH
     */
    public final TableField<ZoCardRecord, String> S_BATCH = createField(DSL.name("S_BATCH"), SQLDataType.VARCHAR(32), this, "批次,batch,S_BATCH");

    /**
     * The column <code>DB_SCAFFOLD.ZO_CARD.S_NUMBER</code>. 卡号,number,S_NUMBER
     */
    public final TableField<ZoCardRecord, String> S_NUMBER = createField(DSL.name("S_NUMBER"), SQLDataType.VARCHAR(64).nullable(false), this, "卡号,number,S_NUMBER");

    /**
     * The column <code>DB_SCAFFOLD.ZO_CARD.RLT_CARD_TYPE</code>.
     * 类型,cardType,RLT_CARD_TYPE
     */
    public final TableField<ZoCardRecord, String> RLT_CARD_TYPE = createField(DSL.name("RLT_CARD_TYPE"), SQLDataType.VARCHAR(36), this, "类型,cardType,RLT_CARD_TYPE");

    /**
     * The column <code>DB_SCAFFOLD.ZO_CARD.IS_MAJOR</code>. 主卡,major,IS_MAJOR
     */
    public final TableField<ZoCardRecord, Boolean> IS_MAJOR = createField(DSL.name("IS_MAJOR"), SQLDataType.BIT, this, "主卡,major,IS_MAJOR");

    /**
     * The column <code>DB_SCAFFOLD.ZO_CARD.J_CONFIG</code>. config,J_CONFIG
     */
    public final TableField<ZoCardRecord, String> J_CONFIG = createField(DSL.name("J_CONFIG"), SQLDataType.CLOB, this, "config,J_CONFIG");

    /**
     * The column <code>DB_SCAFFOLD.ZO_CARD.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public final TableField<ZoCardRecord, Boolean> IS_ACTIVE = createField(DSL.name("IS_ACTIVE"), SQLDataType.BIT, this, "active,IS_ACTIVE");

    /**
     * The column <code>DB_SCAFFOLD.ZO_CARD.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public final TableField<ZoCardRecord, String> Z_SIGMA = createField(DSL.name("Z_SIGMA"), SQLDataType.VARCHAR(32), this, "sigma,Z_SIGMA");

    /**
     * The column <code>DB_SCAFFOLD.ZO_CARD.Z_LANGUAGE</code>.
     * language,Z_LANGUAGE
     */
    public final TableField<ZoCardRecord, String> Z_LANGUAGE = createField(DSL.name("Z_LANGUAGE"), SQLDataType.VARCHAR(8), this, "language,Z_LANGUAGE");

    /**
     * The column <code>DB_SCAFFOLD.ZO_CARD.Z_CREATE_BY</code>.
     * createBy,Z_CREATE_BY
     */
    public final TableField<ZoCardRecord, String> Z_CREATE_BY = createField(DSL.name("Z_CREATE_BY"), SQLDataType.VARCHAR(36), this, "createBy,Z_CREATE_BY");

    /**
     * The column <code>DB_SCAFFOLD.ZO_CARD.Z_CREATE_TIME</code>.
     * createTime,Z_CREATE_TIME
     */
    public final TableField<ZoCardRecord, LocalDateTime> Z_CREATE_TIME = createField(DSL.name("Z_CREATE_TIME"), SQLDataType.LOCALDATETIME(0), this, "createTime,Z_CREATE_TIME");

    /**
     * The column <code>DB_SCAFFOLD.ZO_CARD.Z_UPDATE_BY</code>.
     * updateBy,Z_UPDATE_BY
     */
    public final TableField<ZoCardRecord, String> Z_UPDATE_BY = createField(DSL.name("Z_UPDATE_BY"), SQLDataType.VARCHAR(36), this, "updateBy,Z_UPDATE_BY");

    /**
     * The column <code>DB_SCAFFOLD.ZO_CARD.Z_UPDATE_TIME</code>.
     * updateTime,Z_UPDATE_TIME
     */
    public final TableField<ZoCardRecord, LocalDateTime> Z_UPDATE_TIME = createField(DSL.name("Z_UPDATE_TIME"), SQLDataType.LOCALDATETIME(0), this, "updateTime,Z_UPDATE_TIME");

    private ZoCard(Name alias, Table<ZoCardRecord> aliased) {
        this(alias, aliased, null);
    }

    private ZoCard(Name alias, Table<ZoCardRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_SCAFFOLD.ZO_CARD</code> table reference
     */
    public ZoCard(String alias) {
        this(DSL.name(alias), ZO_CARD);
    }

    /**
     * Create an aliased <code>DB_SCAFFOLD.ZO_CARD</code> table reference
     */
    public ZoCard(Name alias) {
        this(alias, ZO_CARD);
    }

    /**
     * Create a <code>DB_SCAFFOLD.ZO_CARD</code> table reference
     */
    public ZoCard() {
        this(DSL.name("ZO_CARD"), null);
    }

    public <O extends Record> ZoCard(Table<O> child, ForeignKey<O, ZoCardRecord> key) {
        super(child, key, ZO_CARD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_SCAFFOLD;
    }

    @Override
    public UniqueKey<ZoCardRecord> getPrimaryKey() {
        return Keys.KEY_ZO_CARD_PRIMARY;
    }

    @Override
    public List<UniqueKey<ZoCardRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ZO_CARD_UK_ZO_CARD_S_CODE_Z_SIGMA, Keys.KEY_ZO_CARD_UK_ZO_CARD_S_NUMBER_Z_SIGMA);
    }

    @Override
    public ZoCard as(String alias) {
        return new ZoCard(DSL.name(alias), this);
    }

    @Override
    public ZoCard as(Name alias) {
        return new ZoCard(alias, this);
    }

    @Override
    public ZoCard as(Table<?> alias) {
        return new ZoCard(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ZoCard rename(String name) {
        return new ZoCard(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ZoCard rename(Name name) {
        return new ZoCard(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ZoCard rename(Table<?> name) {
        return new ZoCard(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<String, BigDecimal, LocalDateTime, Long, String, String, String, String, Boolean, String, Boolean, String, String, String, LocalDateTime, String, LocalDateTime> fieldsRow() {
        return (Row17) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function17<? super String, ? super BigDecimal, ? super LocalDateTime, ? super Long, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super Boolean, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function17<? super String, ? super BigDecimal, ? super LocalDateTime, ? super Long, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super Boolean, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
