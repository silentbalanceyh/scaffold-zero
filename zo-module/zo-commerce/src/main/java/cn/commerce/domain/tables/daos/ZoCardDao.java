/*
 * This file is generated by jOOQ.
 */
package cn.commerce.domain.tables.daos;


import cn.commerce.domain.tables.ZoCard;
import cn.commerce.domain.tables.records.ZoCardRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ZoCardDao extends AbstractVertxDAO<ZoCardRecord, cn.commerce.domain.tables.pojos.ZoCard, String, Future<List<cn.commerce.domain.tables.pojos.ZoCard>>, Future<cn.commerce.domain.tables.pojos.ZoCard>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<ZoCardRecord,cn.commerce.domain.tables.pojos.ZoCard,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public ZoCardDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(ZoCard.ZO_CARD, cn.commerce.domain.tables.pojos.ZoCard.class, new JDBCClassicQueryExecutor<ZoCardRecord,cn.commerce.domain.tables.pojos.ZoCard,String>(configuration,cn.commerce.domain.tables.pojos.ZoCard.class,vertx));
        }

        @Override
        protected String getId(cn.commerce.domain.tables.pojos.ZoCard object) {
                return object.getPkId();
        }

        /**
     * Find records that have <code>D_AMOUNT IN (values)</code> asynchronously
     */
        public Future<List<cn.commerce.domain.tables.pojos.ZoCard>> findManyByDAmount(Collection<BigDecimal> values) {
                return findManyByCondition(ZoCard.ZO_CARD.D_AMOUNT.in(values));
        }

        /**
     * Find records that have <code>D_AMOUNT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.commerce.domain.tables.pojos.ZoCard>> findManyByDAmount(Collection<BigDecimal> values, int limit) {
                return findManyByCondition(ZoCard.ZO_CARD.D_AMOUNT.in(values),limit);
        }

        /**
     * Find records that have <code>D_EXPIRED_TIME IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.commerce.domain.tables.pojos.ZoCard>> findManyByDExpiredTime(Collection<LocalDateTime> values) {
                return findManyByCondition(ZoCard.ZO_CARD.D_EXPIRED_TIME.in(values));
        }

        /**
     * Find records that have <code>D_EXPIRED_TIME IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.commerce.domain.tables.pojos.ZoCard>> findManyByDExpiredTime(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(ZoCard.ZO_CARD.D_EXPIRED_TIME.in(values),limit);
        }

        /**
     * Find records that have <code>L_POINT IN (values)</code> asynchronously
     */
        public Future<List<cn.commerce.domain.tables.pojos.ZoCard>> findManyByLPoint(Collection<Long> values) {
                return findManyByCondition(ZoCard.ZO_CARD.L_POINT.in(values));
        }

        /**
     * Find records that have <code>L_POINT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.commerce.domain.tables.pojos.ZoCard>> findManyByLPoint(Collection<Long> values, int limit) {
                return findManyByCondition(ZoCard.ZO_CARD.L_POINT.in(values),limit);
        }

        /**
     * Find records that have <code>S_CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.commerce.domain.tables.pojos.ZoCard>> findManyBySCode(Collection<String> values) {
                return findManyByCondition(ZoCard.ZO_CARD.S_CODE.in(values));
        }

        /**
     * Find records that have <code>S_CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.commerce.domain.tables.pojos.ZoCard>> findManyBySCode(Collection<String> values, int limit) {
                return findManyByCondition(ZoCard.ZO_CARD.S_CODE.in(values),limit);
        }

        /**
     * Find records that have <code>S_BATCH IN (values)</code> asynchronously
     */
        public Future<List<cn.commerce.domain.tables.pojos.ZoCard>> findManyBySBatch(Collection<String> values) {
                return findManyByCondition(ZoCard.ZO_CARD.S_BATCH.in(values));
        }

        /**
     * Find records that have <code>S_BATCH IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.commerce.domain.tables.pojos.ZoCard>> findManyBySBatch(Collection<String> values, int limit) {
                return findManyByCondition(ZoCard.ZO_CARD.S_BATCH.in(values),limit);
        }

        /**
     * Find records that have <code>S_NUMBER IN (values)</code> asynchronously
     */
        public Future<List<cn.commerce.domain.tables.pojos.ZoCard>> findManyBySNumber(Collection<String> values) {
                return findManyByCondition(ZoCard.ZO_CARD.S_NUMBER.in(values));
        }

        /**
     * Find records that have <code>S_NUMBER IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.commerce.domain.tables.pojos.ZoCard>> findManyBySNumber(Collection<String> values, int limit) {
                return findManyByCondition(ZoCard.ZO_CARD.S_NUMBER.in(values),limit);
        }

        /**
     * Find records that have <code>RLT_CARD_TYPE IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.commerce.domain.tables.pojos.ZoCard>> findManyByRltCardType(Collection<String> values) {
                return findManyByCondition(ZoCard.ZO_CARD.RLT_CARD_TYPE.in(values));
        }

        /**
     * Find records that have <code>RLT_CARD_TYPE IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.commerce.domain.tables.pojos.ZoCard>> findManyByRltCardType(Collection<String> values, int limit) {
                return findManyByCondition(ZoCard.ZO_CARD.RLT_CARD_TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>IS_MAJOR IN (values)</code> asynchronously
     */
        public Future<List<cn.commerce.domain.tables.pojos.ZoCard>> findManyByIsMajor(Collection<Boolean> values) {
                return findManyByCondition(ZoCard.ZO_CARD.IS_MAJOR.in(values));
        }

        /**
     * Find records that have <code>IS_MAJOR IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.commerce.domain.tables.pojos.ZoCard>> findManyByIsMajor(Collection<Boolean> values, int limit) {
                return findManyByCondition(ZoCard.ZO_CARD.IS_MAJOR.in(values),limit);
        }

        /**
     * Find records that have <code>J_CONFIG IN (values)</code> asynchronously
     */
        public Future<List<cn.commerce.domain.tables.pojos.ZoCard>> findManyByJConfig(Collection<String> values) {
                return findManyByCondition(ZoCard.ZO_CARD.J_CONFIG.in(values));
        }

        /**
     * Find records that have <code>J_CONFIG IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.commerce.domain.tables.pojos.ZoCard>> findManyByJConfig(Collection<String> values, int limit) {
                return findManyByCondition(ZoCard.ZO_CARD.J_CONFIG.in(values),limit);
        }

        /**
     * Find records that have <code>IS_ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.commerce.domain.tables.pojos.ZoCard>> findManyByIsActive(Collection<Boolean> values) {
                return findManyByCondition(ZoCard.ZO_CARD.IS_ACTIVE.in(values));
        }

        /**
     * Find records that have <code>IS_ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.commerce.domain.tables.pojos.ZoCard>> findManyByIsActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(ZoCard.ZO_CARD.IS_ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>Z_SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.commerce.domain.tables.pojos.ZoCard>> findManyByZSigma(Collection<String> values) {
                return findManyByCondition(ZoCard.ZO_CARD.Z_SIGMA.in(values));
        }

        /**
     * Find records that have <code>Z_SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.commerce.domain.tables.pojos.ZoCard>> findManyByZSigma(Collection<String> values, int limit) {
                return findManyByCondition(ZoCard.ZO_CARD.Z_SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>Z_LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.commerce.domain.tables.pojos.ZoCard>> findManyByZLanguage(Collection<String> values) {
                return findManyByCondition(ZoCard.ZO_CARD.Z_LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>Z_LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.commerce.domain.tables.pojos.ZoCard>> findManyByZLanguage(Collection<String> values, int limit) {
                return findManyByCondition(ZoCard.ZO_CARD.Z_LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>Z_CREATE_BY IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.commerce.domain.tables.pojos.ZoCard>> findManyByZCreateBy(Collection<String> values) {
                return findManyByCondition(ZoCard.ZO_CARD.Z_CREATE_BY.in(values));
        }

        /**
     * Find records that have <code>Z_CREATE_BY IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.commerce.domain.tables.pojos.ZoCard>> findManyByZCreateBy(Collection<String> values, int limit) {
                return findManyByCondition(ZoCard.ZO_CARD.Z_CREATE_BY.in(values),limit);
        }

        /**
     * Find records that have <code>Z_CREATE_TIME IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.commerce.domain.tables.pojos.ZoCard>> findManyByZCreateTime(Collection<LocalDateTime> values) {
                return findManyByCondition(ZoCard.ZO_CARD.Z_CREATE_TIME.in(values));
        }

        /**
     * Find records that have <code>Z_CREATE_TIME IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.commerce.domain.tables.pojos.ZoCard>> findManyByZCreateTime(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(ZoCard.ZO_CARD.Z_CREATE_TIME.in(values),limit);
        }

        /**
     * Find records that have <code>Z_UPDATE_BY IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.commerce.domain.tables.pojos.ZoCard>> findManyByZUpdateBy(Collection<String> values) {
                return findManyByCondition(ZoCard.ZO_CARD.Z_UPDATE_BY.in(values));
        }

        /**
     * Find records that have <code>Z_UPDATE_BY IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.commerce.domain.tables.pojos.ZoCard>> findManyByZUpdateBy(Collection<String> values, int limit) {
                return findManyByCondition(ZoCard.ZO_CARD.Z_UPDATE_BY.in(values),limit);
        }

        /**
     * Find records that have <code>Z_UPDATE_TIME IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.commerce.domain.tables.pojos.ZoCard>> findManyByZUpdateTime(Collection<LocalDateTime> values) {
                return findManyByCondition(ZoCard.ZO_CARD.Z_UPDATE_TIME.in(values));
        }

        /**
     * Find records that have <code>Z_UPDATE_TIME IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.commerce.domain.tables.pojos.ZoCard>> findManyByZUpdateTime(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(ZoCard.ZO_CARD.Z_UPDATE_TIME.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<ZoCardRecord,cn.commerce.domain.tables.pojos.ZoCard,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<ZoCardRecord,cn.commerce.domain.tables.pojos.ZoCard,String>) super.queryExecutor();
        }
}
